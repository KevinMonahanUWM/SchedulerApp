from django.shortcuts import render, redirect
from django.utils.datastructures import MultiValueDictKeyError
from django.views import View
from TAScheduler.models import User, Administrator, Instructor, TA
from TAScheduler.views_methods import TAObj, InstructorObj, AdminObj


def determineUser(user):  # Str generated by the database
    email = user.split(": ", 1)[1]
    email_role = email.split(" -  ", 1)
    selected_user = User.objects.get(email_address=email_role[0])
    if email_role[1].lower() == "ta":
        user_object = TAObj(TA.objects.get(user=selected_user))
    elif email_role[1].lower() == "instructor":
        user_object = InstructorObj(Instructor.objects.get(user=selected_user))
    else:
        user_object = AdminObj(Administrator.objects.get(user=selected_user))
    return user_object


class Login(View):
    def get(self, request):
        return render(request, "login.html")

    def post(self, request):
        username = request.POST.get('username')
        password = request.POST.get('password')
        try:
            user_database = User.objects.get(email_address=username, password=password)
            if Administrator.objects.filter(user=user_database).exists():
                user = AdminObj(Administrator.objects.get(user=user_database))
            elif Instructor.objects.filter(user=user_database).exists():
                user = InstructorObj(Instructor.objects.get(user=user_database))
            elif TA.objects.filter(user=user_database).exists():
                user = TAObj(TA.objects.get(user=user_database))
            else:
                raise Exception("Bad password or username")
        except:
            return render(request, "login.html", {"error": "Invalid username or password"})

        if user.login(username, password):
            request.session["user"] = str(user.database)
            return redirect('/home/')


class Home(View):

    def get(self, request):
        if request.session.get("user") is None:
            return redirect("/")
        username = determineUser(request.session["user"]).getUsername()
        # Render the admin home page with context for navigation
        context = {
            'username': username,  # assuming the User model has a 'username' attribute
            'manage_accounts': '/home/manageaccount',
            'manage_courses': '/home/managecourse',
            'manage_sections': '/home/managesection',
        }
        return render(request, 'home.html', context)

    def post(self, request):

        # Perform actions based on the posted data
        # Assuming buttons in the admin_home.html have the name attribute set to these values
        if 'account_management' in request.POST:
            return redirect('/home/manageaccount')
        elif 'course_management' in request.POST:
            return redirect('/home/managecourse')
        elif 'section_management' in request.POST:
            return redirect('/home/managesection')
        elif 'logout' in request.POST:
            del request.session["user"]
            return redirect('/')  # Redirect to login page after logout
        else:
            # If the action is unrecognized, return to the home page with an error message
            return render(request, 'home.html', {'error': 'Unrecognized action'})


class CourseManagement(View):

    def get(self, request):
        if request.session.get("user") is None:
            return redirect("/")
        return render(request, "courseManagement/course_management.html")


class CreateCourse(View):

    def get(self, request):
        if request.session.get("user") is None:
            return redirect("/")
        return render(request, "courseManagement/create_course.html")


class DeleteCourse(View):

    def get(self, request):
        if request.session.get("user") is None:
            return redirect("/")
        return render(request, "courseManagement/delete_course.html")


class EditCourse(View):

    def get(self, request):
        if request.session.get("user") is None:
            return redirect("/")
        return render(request, "courseManagement/edit_course.html")


class AddInstructorToCourse(View):

    def get(self, request):
        if request.session.get("user") is None:
            return redirect("/")
        return render(request, "courseManagement/add_instructor_to_course.html")


class AccountManagement(View):

    def get(self, request):
        if request.session.get("user") is None:
            return redirect("/")
        return render(request, "accountManagement/account_management.html")


class CreateAccount(View):

    def get(self, request):
        if request.session.get("user") is None:
            return redirect("/")
        roles = ["Admin", "Instructor", "TA"]
        return render(request, "accountManagement/create_account.html", {"roles": roles})

    def post(self, request):
        if request.POST["phone_number"] == "":
            number = 0
        else:
            number = request.POST["phone_number"]
        account_info = {
            "email_address": request.POST["email_address"],
            "password": request.POST["password"],
            "first_name": request.POST["first_name"],
            "last_name": request.POST["last_name"],
            "home_address": request.POST["home_address"],
            "phone_number": number,
        }
        print(request.session["user"])
        try:
            determineUser(request.session["user"]).createUser(account_info, role=request.POST["role"])
            return render(request, "success.html", {"message": "User successfully created",
                                                    "previous_url": "/home/manageaccount/create"})
        except Exception as e:
            return render(request, "error.html", {"message": e,
                                                  "previous_url": "/home/manageaccount/create"})


class DeleteAccount(View):

    def get(self, request):
        if request.session.get("user") is None:
            return redirect("/")
        users = list(
            map(str, Administrator.objects.exclude(user=determineUser(request.session["user"]).database.user)))
        users.extend(list(
            map(str, Instructor.objects.exclude(user=determineUser(request.session["user"]).database.user))))
        users.extend(
            list(map(str, TA.objects.exclude(user=determineUser(request.session["user"]).database.user))))
        if len(users) == 0:
            return render(request, "error.html", {"message": "No existing users to delete",
                                                  "previous_url": "/home/manageaccount/"})
        return render(request, "accountManagement/delete_account.html", {"users": users})

    def post(self, request):
        user_object = determineUser(request.POST["user"])
        try:
            determineUser(request.session["user"]).database.user.removeUser(user_object)
            return render(request, "success.html", {"message": "User successfully deleted",
                                                    "previous_url": "/home/manageaccount/delete/"})
        except Exception as e:
            return render(request, "error.html", {"message": e,
                                                  "previous_url": "/home/manageaccount/delete/"})


class EditAccount(View):

    def get(self, request):
        if request.session.get("user") is None:
            return redirect("/")
        users = list(
            map(str, Administrator.objects.exclude(user=determineUser(request.session["user"]).database.user)))
        users.extend(list(
            map(str, Instructor.objects.exclude(user=determineUser(request.session["user"]).database.user))))
        users.extend(
            list(map(str, TA.objects.exclude(user=determineUser(request.session["user"]).database.user))))
        if len(users) == 0:
            return render(request, "error.html", {"message": "No existing users to edit",
                                                  "previous_url": "/home/manageaccount"})
        return render(request, "accountManagement/edit_account.html", {"users": users,
                                                                       "selected": False, "role": "Admin"})

    def post(self, request):
        try:
            user_object = determineUser(request.POST["user"])
            role = user_object.getRole()
            request.session["current_edit"] = request.POST["user"]
            return render(request, "accountManagement/edit_account.html", {"users": None,
                                                                           "selected": True, "role": role})
        except MultiValueDictKeyError:
            if request.POST["phone_number"] == "":
                number = 0
            else:
                number = request.POST["phone_number"]
            grader = True
            if request.POST.get("grader_status") is None:
                grader = False
            account_info = {
                "email_address": request.POST.get("email_address"),
                "password": request.POST.get("password"),
                "first_name": request.POST.get("first_name"),
                "last_name": request.POST.get("last_name"),
                "home_address": request.POST.get("home_address"),
                "phone_number": number,
                "grader_status": grader,
                "max_assignments": request.POST.get("max_assignments")
            }
            try:
                (AdminObj(Administrator.objects.get(user=User.objects.get(email_address=request.session.get("user"))))
                 .editUser(determineUser(request.session["current_edit"]), account_info))
                del request.session["current_edit"]
                return render(request, "success.html", {"message": "User successfully changed",
                                                        "previous_url": "/home/manageaccount/edit"})
            except Exception as e:
                del request.session["current_edit"]
                return render(request, "error.html", {"message": e,
                                                      "previous_url": "/home/manageaccount/edit"})


class SectionManagement(View):

    def get(self, request):
        if request.session.get("user") is None:
            return redirect("/")
        return render(request, "sectionManagement/section_management.html")


class CreateSection(View):
    def get(self, request):
        if request.session.get("user") is None:
            return redirect("/")
        return render(request, "sectionManagement/create_section.html")

    def post(self, request):
        section_id = request.POST.get('section_id')
        course_id = request.POST.get('course_id')
        section_type = request.POST.get('section_type')
        location = request.POST.get('location')
        meeting_time = request.POST.get('meeting_time')
        secInfo = {'section_id': section_id, 'course_id': course_id,
                   'section_type': section_type, 'location': location, 'meeting_time': meeting_time}

        adminUser = request.session["user_object"]  # ASSUMING WE'RE STORING AdminObj IN SESSION AT THE LOGIN
        try:
            # ASSUMING .createSection() WILL HANDLE ALL THE BAD INPUT.
            # WE'RE GOING TO NEED TO ADJUST ALL OUR MESSAGES TO RETURN MESSAGES NOT JUST THROW EXCEPTIONS
            # ... UNLESS MAKE CUSTOM EXCEPTIONS AND CHECK FOR THOSE HERE?
            message = adminUser.createSection(secInfo)
            # WE DON'T HAVE SUCCESS URL OR SUCCESS HTML ATM.
            return render(request, "success.html", {"message": message})
        except Exception as e:
            # WE DON'T HAVE ERROR URL OR ERROR HTML ATM.
            # NEED A WAY TO RETURN AN INFORMATIVE MESSAGE FROM THE CREATESECTION METHOD
            return render(request, "error.html", {"message": e})


class DeleteSection(View):
    # ad
    def get(self, request):
        if request.session.get("user") is None:
            return redirect("/")
        return render(request, "sectionManagement/delete_section.html")


class EditSection(View):

    def get(self, request):
        if request.session.get("user") is None:
            return redirect("/")
        return render(request, "sectionManagement/edit_section.html")


class AddTAToSection(View):

    def get(self, request):
        if request.session.get("user") is None:
            return redirect("/")
        return render(request, "sectionManagement/add_ta_to_section.html")


class Success(View):

    def get(self, request):
        return render(request, "success.html")


class Error(View):

    def get(self, request):
        return render(request, "success.html")
